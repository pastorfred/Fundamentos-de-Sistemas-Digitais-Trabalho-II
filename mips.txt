
0x00400000  0x02529026  xor $18,$18,$18       4    main:		xor	$s2, $s2, $s2		#zera $s2 (i)
0x00400004  0x3c011001  lui $1,0x00001001     6    		la	$t3, vetA		#carrega o endereco de a
0x00400008  0x342b0004  ori $11,$1,0x00000004      
0x0040000c  0x3c011001  lui $1,0x00001001     7    		la	$t4, vetB		#carrega o endereco de b
0x00400010  0x342c001c  ori $12,$1,0x0000001c      
0x00400014  0x3c011001  lui $1,0x00001001     8    		la	$t5, vetC		#carrega o endereco de c
0x00400018  0x342d0034  ori $13,$1,0x00000034      
0x0040001c  0x3c011001  lui $1,0x00001001     10   		la	$t6, mediaA		#carrega o endereco de mediaA
0x00400020  0x342e0054  ori $14,$1,0x00000054      
0x00400024  0x3c011001  lui $1,0x00001001     11   		la	$t7, mediaB		#carrega o endereco de mediaB
0x00400028  0x342f0058  ori $15,$1,0x00000058      
0x0040002c  0x3c011001  lui $1,0x00001001     12   		la	$t8, mediaC		#carrega o endereco de mediaC
0x00400030  0x3438005c  ori $24,$1,0x0000005c      
0x00400034  0x3c011001  lui $1,0x00001001     14   		la	$s0, n			#carrega o endereco n
0x00400038  0x34300000  ori $16,$1,0x00000000      
0x0040003c  0x8e100000  lw $16,0x00000000($16)15   		lw	$s0, 0($s0)		#poe n (6) em $s0
0x00400040  0x3c011001  lui $1,0x00001001     17   		la 	$t0, vm
0x00400044  0x3428004c  ori $8,$1,0x0000004c       
0x00400048  0x8d080000  lw $8,0x00000000($8)  18   		lw 	$t0, 0($t0)
0x0040004c  0x01084026  xor $8,$8,$8          19   		xor 	$t0, $t0, $t0
0x00400050  0x8d730000  lw $19,0x00000000($11)21   calculo:	lw	$s3, 0($t3)		#a[i] em $s3
0x00400054  0x8d940000  lw $20,0x00000000($12)22   		lw	$s4, 0($t4)		#b[i] em $s4
0x00400058  0x8db50000  lw $21,0x00000000($13)23   		lw	$s5, 0($t5)		#c[i] em $s5
0x0040005c  0x8dce0000  lw $14,0x00000000($14)26   		lw	$t6, 0($t6)		#$t6 = mediaA
0x00400060  0x01d3b820  add $23,$14,$19       27   		add	$s7, $t6, $s3		#adiciona media A com $s3 em $s7
0x00400064  0x3c011001  lui $1,0x00001001     28   		la	$t6, mediaA		#$t6 = &mediaA
0x00400068  0x342e0054  ori $14,$1,0x00000054      
0x0040006c  0xadd70000  sw $23,0x00000000($14)29   		sw	$s7, 0($t6)		#coloca soma total no conteudo de $t6
0x00400070  0x8def0000  lw $15,0x00000000($15)32   		lw	$t7, 0($t7)		#$t7 = mediaB
0x00400074  0x01f4b820  add $23,$15,$20       33   		add	$s7, $t7, $s4
0x00400078  0x3c011001  lui $1,0x00001001     34   		la	$t7, mediaB		#$t7 = &mediaB
0x0040007c  0x342f0058  ori $15,$1,0x00000058      
0x00400080  0xadf70000  sw $23,0x00000000($15)35   		sw	$s7, 0($t7)
0x00400084  0x8f180000  lw $24,0x00000000($24)38   		lw	$t8, 0($t8)		#$t8 = mediaC
0x00400088  0x0315b820  add $23,$24,$21       39   		add	$s7, $t8, $s5
0x0040008c  0x3c011001  lui $1,0x00001001     40   		la	$t8, mediaC		#$t8 = &mediaC
0x00400090  0x3438005c  ori $24,$1,0x0000005c      
0x00400094  0xaf170000  sw $23,0x00000000($24)41   		sw	$s7, 0($t8)
0x00400098  0x22520001  addi $18,$18,0x000000044   		addi	$s2, $s2, 1		#i++
0x0040009c  0x216b0004  addi $11,$11,0x000000045   		addi	$t3, $t3, 4		#a[i++]
0x004000a0  0x218c0004  addi $12,$12,0x000000046   		addi	$t4, $t4, 4		#b[i++]
0x004000a4  0x21ad0004  addi $13,$13,0x000000047   		addi	$t5, $t5, 4		#c[i++]
0x004000a8  0x1650ffe9  bne $18,$16,0xffffffe948   		bne	$s2, $s0, calculo	#i != n
0x004000ac  0x8dce0000  lw $14,0x00000000($14)51   		lw	$t6, 0($t6)
0x004000b0  0x01c08820  add $17,$14,$0        52   		add	$s1, $t6, $zero
0x004000b4  0x3c011001  lui $1,0x00001001     53   		la	$t6, mediaA
0x004000b8  0x342e0054  ori $14,$1,0x00000054      
0x004000bc  0x0c10007d  jal 0x004001f4        55   		jal	divider
0x004000c0  0xadc30000  sw $3,0x00000000($14) 57   		sw	$v1, 0($t6)
0x004000c4  0x8def0000  lw $15,0x00000000($15)60   		lw	$t7, 0($t7)
0x004000c8  0x01e08820  add $17,$15,$0        61   		add	$s1, $t7, $zero
0x004000cc  0x3c011001  lui $1,0x00001001     62   		la	$t7, mediaB
0x004000d0  0x342f0058  ori $15,$1,0x00000058      
0x004000d4  0x0c10007d  jal 0x004001f4        64   		jal	divider
0x004000d8  0xade30000  sw $3,0x00000000($15) 66   		sw	$v1, 0($t7)
0x004000dc  0x8f180000  lw $24,0x00000000($24)69   		lw	$t8, 0($t8)
0x004000e0  0x03008820  add $17,$24,$0        70   		add	$s1, $t8, $zero
0x004000e4  0x3c011001  lui $1,0x00001001     71   		la	$t8, mediaC
0x004000e8  0x3438005c  ori $24,$1,0x0000005c      
0x004000ec  0x0c10007d  jal 0x004001f4        73   		jal	divider
0x004000f0  0xaf030000  sw $3,0x00000000($24) 75   		sw	$v1, 0($t8)
0x004000f4  0x01294826  xor $9,$9,$9          77   defineVM:	xor	$t1, $t1, $t1
0x004000f8  0x21290001  addi $9,$9,0x00000001 78   		addi	$t1, $t1, 1		#$t1 = 1
0x004000fc  0x8dce0000  lw $14,0x00000000($14)80   testaA:		lw	$t6, 0($t6)		#media A
0x00400100  0x8def0000  lw $15,0x00000000($15)81   		lw	$t7, 0($t7)		#media B
0x00400104  0x8f180000  lw $24,0x00000000($24)82   		lw	$t8, 0($t8)		#media C
0x00400108  0x01cf402a  slt $8,$14,$15        83   		slt	$t0, $t6, $t7		#media A < media B, $t0 = 1, caso contrario $t0 = 0
0x0040010c  0x15090006  bne $8,$9,0x00000006  84   		bne	$t0, $t1, testaB	#se media A >= media B, pula pra testaB
0x00400110  0x01cf402a  slt $8,$14,$15        85   		slt	$t0, $t6, $t7		#media A < media C, $t0 = 1, caso contrario $t0 = 0
0x00400114  0x1509000a  bne $8,$9,0x0000000a  86   		bne	$t0, $t1, testaC	#se media A >= media C, pula pra testaC
0x00400118  0x3c011001  lui $1,0x00001001     87   		la	$t0, vm
0x0040011c  0x3428004c  ori $8,$1,0x0000004c       
0x00400120  0xad0e0000  sw $14,0x00000000($8) 88   		sw	$t6, 0($t0)		#media A foi a menor media, coloca em vm
0x00400124  0x08100055  j 0x00400154          89   		j	vetorD
0x00400128  0x01f8402a  slt $8,$15,$24        91   testaB:		slt	$t0, $t7, $t8		#media B < media C, $t0 = 1, caso contrario $t0 = 0
0x0040012c  0x15090004  bne $8,$9,0x00000004  92   		bne	$t0, $t1, testaC
0x00400130  0x3c011001  lui $1,0x00001001     93   		la	$t0, vm
0x00400134  0x3428004c  ori $8,$1,0x0000004c       
0x00400138  0xad0f0000  sw $15,0x00000000($8) 94   		sw	$t7, 0($t0)		#media B foi a menor media, coloca em vm
0x0040013c  0x08100055  j 0x00400154          95   		j	vetorD
0x00400140  0x030e402a  slt $8,$24,$14        97   testaC:		slt	$t0, $t8, $t6		#media C < media A, $t0 = 1, caso contrario $t0 = 0
0x00400144  0x15090026  bne $8,$9,0x00000026  98   		bne	$t0, $t1, end		#deu erro (nenhuma media foi a menor)
0x00400148  0x3c011001  lui $1,0x00001001     99   		la	$t0, vm					
0x0040014c  0x3428004c  ori $8,$1,0x0000004c       
0x00400150  0xad180000  sw $24,0x00000000($8) 100  		sw	$t8, 0($t0)		#media C foi a menor media, coloca em vm
0x00400154  0x02529026  xor $18,$18,$18       102  vetorD:		xor	$s2, $s2, $s2		#zera $s2 (i)
0x00400158  0x014a5026  xor $10,$10,$10       103  		xor	$t2, $t2, $t2		#zera $t2 (flag booleano)
0x0040015c  0x3c011001  lui $1,0x00001001     104  		la	$t6, vetD		#carrega end. d
0x00400160  0x342e0050  ori $14,$1,0x00000050      
0x00400164  0x3c011001  lui $1,0x00001001     105  		la	$t7, k			#carrega end. k
0x00400168  0x342f0050  ori $15,$1,0x00000050      
0x0040016c  0x8def0000  lw $15,0x00000000($15)106  		lw	$t7, 0($t7)		#carrega valor de k
0x00400170  0x01ef7826  xor $15,$15,$15       107  		xor 	$t7, $t7, $t7
0x00400174  0x8d080000  lw $8,0x00000000($8)  108  		lw	$t0, 0($t0)		#carrega valor de vm
0x00400178  0x3c011001  lui $1,0x00001001     109  		la	$t3, vetA 
0x0040017c  0x342b0004  ori $11,$1,0x00000004      
0x00400180  0x3c011001  lui $1,0x00001001     110  		la	$t4, vetB
0x00400184  0x342c001c  ori $12,$1,0x0000001c      
0x00400188  0x3c011001  lui $1,0x00001001     111  		la	$t5, vetC
0x0040018c  0x342d0034  ori $13,$1,0x00000034      
0x00400190  0x8d730000  lw $19,0x00000000($11)113  loopD:		lw	$s3, 0($t3)		#a[i]
0x00400194  0x8d940000  lw $20,0x00000000($12)114  		lw	$s4, 0($t4)		#b[i]
0x00400198  0x8db50000  lw $21,0x00000000($13)115  		lw	$s5, 0($t5)		#c[i]
0x0040019c  0x0113502a  slt $10,$8,$19        118  comparaA:	slt	$t2, $t0, $s3		#a[i] > vm?
0x004001a0  0x15490002  bne $10,$9,0x00000002 119  		bne	$t2, $t1, comparaB	#nao, prox comparacao
0x004001a4  0x0260c020  add $24,$19,$0        120  		add	$t8, $s3, $zero 	#else $t8 = a[i]
0x004001a8  0x0c100079  jal 0x004001e4        121  		jal	adiciona
0x004001ac  0x0114502a  slt $10,$8,$20        123  comparaB:	slt	$t2, $t0, $s4		#b[i] > vm?
0x004001b0  0x15490002  bne $10,$9,0x00000002 124  		bne	$t2, $t1, comparaC	#nao, prox comparacao
0x004001b4  0x0280c020  add $24,$20,$0        125  		add	$t8, $s4, $zero		#else $t8 = b[i]
0x004001b8  0x0c100079  jal 0x004001e4        126  		jal 	adiciona
0x004001bc  0x0115502a  slt $10,$8,$21        128  comparaC:	slt	$t2, $t0, $s5		#c[i] > vm?
0x004001c0  0x15490002  bne $10,$9,0x00000002 129  		bne	$t2, $t1, incrementa	#nao, incrementa vars
0x004001c4  0x02a0c020  add $24,$21,$0        130  		add	$t8, $s5, $zero		#else $t8 = c[i]
0x004001c8  0x0c100079  jal 0x004001e4        131  		jal	adiciona 
0x004001cc  0x22520001  addi $18,$18,0x0000000133  incrementa:	addi	$s2, $s2, 1		#i++
0x004001d0  0x216b0004  addi $11,$11,0x0000000134  		addi	$t3, $t3, 4		#a[i++]
0x004001d4  0x218c0004  addi $12,$12,0x0000000135  		addi	$t4, $t4, 4		#b[i++]
0x004001d8  0x21ad0004  addi $13,$13,0x0000000136  		addi	$t5, $t5, 4		#c[i++]
0x004001dc  0x1650ffec  bne $18,$16,0xffffffec137  		bne	$s2, $s0, loopD
0x004001e0  0x08100078  j 0x004001e0          139  end:		j end
0x004001e4  0xadd80000  sw $24,0x00000000($14)142  adiciona:	sw	$t8, 0($t6)		#guarda o conteudo de $t8 (elemento a ser adicionado em D) em d[k]		
0x004001e8  0x21ef0001  addi $15,$15,0x0000000143  		addi 	$t7, $t7, 1		#k++
0x004001ec  0x21ce0004  addi $14,$14,0x0000000144  		addi	$t6, $t6, 4		#d[k++]
0x004001f0  0x03e00008  jr $31                145  		jr	$ra			#retorna
0x004001f4  0x3c088000  lui $8,0x00008000     152  divider:	lui $t0, 0x8000 # máscara para isolar bit mais significativo
0x004001f8  0x24090020  addiu $9,$0,0x00000020153   		li $t1, 32 # contador de iterações
0x004001fc  0x00421026  xor $2,$2,$2          154   		xor $v0, $v0, $v0 # registrador P($v0)-A($v1) com 0 e o dividendo ($s1)
0x00400200  0x02201820  add $3,$17,$0         155   		add $v1, $s1, $0
0x00400204  0x00685024  and $10,$3,$8         157  dloop: 		and $t2, $v1, $t0 # isola em t2 o bit mais significativo do registador 'A' ($v1)
0x00400208  0x00021040  sll $2,$2,0x00000001  158   		sll $v0, $v0, 1 # desloca para a esquerda o registrado P-A
0x0040020c  0x00031840  sll $3,$3,0x00000001  159   		sll $v1, $v1, 1
0x00400210  0x11400001  beq $10,$0,0x00000001 160   		beq $t2, $0, di1
0x00400214  0x34420001  ori $2,$2,0x00000001  161   		ori $v0, $v0, 1 # coloca 1 no bit menos significativo do registador 'P'($v0)
0x00400218  0x00505022  sub $10,$2,$16        163  di1: 		sub $t2, $v0, $s0 # subtrai 'P'($v0) do divisor ($s0)
0x0040021c  0x0140082a  slt $1,$10,$0         164  		blt $t2, $0, di2
0x00400220  0x14200002  bne $1,$0,0x00000002       
0x00400224  0x01401020  add $2,$10,$0         165   		add $v0, $t2, $0 # se a subtração deu positiva, 'P'($v0) recebe o valor da subtração
0x00400228  0x34630001  ori $3,$3,0x00000001  166   		ori $v1, $v1, 1 # e 'A'($v1) recebe 1 no bit menos significativo
0x0040022c  0x2129ffff  addi $9,$9,0xffffffff 168  di2: 		addi $t1, $t1, -1 # decrementa o número de iterações
0x00400230  0x1520fff4  bne $9,$0,0xfffffff4  169   		bne $t1, $0, dloop
0x00400234  0x03e00008  jr $31                170   		jr $ra 

0x10010000    0x00000006 0x0000006f 0x000000de 0x0000014d 0x000001bc 0x0000022b 0x0000029a 0x0000021f 
0x10010020    0x000001af 0x0000014c 0x00000036 0x00000000 0x00000001 0x00000035 0x00000154 0x000000c1 
0x10010040    0x0000000c 0x00000004 0x000003e7 0x000000e2 0x0000021f 0x000001af 0x00000154 0x0000014d 
0x10010060    0x0000014c 0x000001bc 0x0000022b 0x0000029a 0x000003e7 0x00000000 0x00000000 0x00000000
